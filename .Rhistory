Box.test(fit2_ar$residuals, lag=12, fitdf=9, type="Ljung") #p-value=.897
#Now, let's compute forecast
autoplot(forecast(fit2_ar, h=24))
#Transformation
library(fpp)
plot(elec)
plot(BoxCox(elec,lambda=1/2))## Transformations with lamda = 1/2
plot(BoxCox(elec,lambda=0))## Transformations with lamda = 0, which is natural logarithm
plot(BoxCox(elec,lambda=-1))## Transformations with lamda = -1
plot(BoxCox(elec,lambda=0))
fit <- snaive(elec, lambda=0)
plot(fit)
plot(fit, include=120)
BoxCox.lambda(elec) #mathematically optimal lambda, lambda = 0.2654076
plot(BoxCox(elec,lambda=BoxCox.lambda(elec)))
####### Extra practice problems on Transfomration #######
#ausbeer
#Source: fpp package
#Description:Total quarterly beer production in Australia (in megalitres) from 1956:Q1 to 2008:Q3.
plot(ausbeer)
plot(BoxCox(ausbeer,lambda=1/2))
plot(BoxCox(ausbeer,lambda=0))
plot(BoxCox(ausbeer,lambda=-1))
BoxCox.lambda(ausbeer)
######
# dj
# Source: fpp package
# Description: Dow-Jones index on 251 trading days ending 26 Aug 1994
plot(dj)
plot(BoxCox(dj,lambda=1/2))
plot(BoxCox(dj,lambda=0))
plot(BoxCox(dj,lambda=-1))
BoxCox.lambda(dj)
#Stationarity
#continued with Dow Jones data
plot(dj,main="Dow-Jones index on 251 trading days ending 26 Aug 1994",xlab="Year",ylab="Price per share ($)") ##NOT stationary
plot(diff(dj),main="Difference of Dow-Jones index",xlab="Year",ylab="$") # Look Stationary
# hsales
# Source: fpp package
# Description: Monthly sales of new one-family houses sold in the USA from 1973-1995
plot(hsales) #NOT stationary
# eggs
# Source: fpp package
# Description: Price of dozen eggs in US, 1900Ð1993, in constant dollars
plot(eggs) #NOT stationary
#Unit-root test
adf.test(dj) #p-value = .5816: non stationary
adf.test(diff(dj)) #p-value < .01: stationary
#Unit-root test
adf.test(dj) #p-value = .5816: non stationary
adf.test(diff(dj)) #p-value < .01: stationary
#Another example
# usmelec
# Source: fpp package
# Description: Electricity net generation measured in billions of kilowatt hours (kWh), January 1973-October 2010.
plot(usmelec)
plot(log(usmelec)) #Take log transformation
plot(diff(log(usmelec),12)) #Seasonal differenced series is closer to being stationary
plot(diff(diff(log(usmelec),12),1)) #Take the first difference of the Seasonal differenced series above: stationary!
adf.test(log(usmelec))
adf.test(diff(log(usmelec),12))
adf.test(diff(diff(log(usmelec),12),1))
# Automated differences:
ndiffs(dj)
nsdiffs(log(usmelec))
dataFile_name <- "m-ibm3dx2608.txt" #Monthly IBM stock, VW index, EW index and S&P index returns
dataFile_url <- paste("http://faculty.chicagobooth.edu/ruey.tsay/teaching/fts3/", dataFile_name, sep = "")
library(data.table)
data <- fread(dataFile_url)
library(fpp)
library(forecast)
library(ggplot2)
head(data) #see the first 6 entries of the data
#Convert data to a time series object
#Use ts(data,start, frequency, ...)
ibmrtn_ts = ts(data[,2],start=c(1926,1), frequency = 12)
#Produce a time plot for IBM returns
autoplot(ibmrtn_ts)
adf.test(ibmrtn_ts) #p-value< 0.01 -> stationary
#Check to see if the mean of IBM's returns is different from zero
t.test(ibmrtn_ts) #p-value ~ 0: mean of IBM returns is different from zero
#Prooduce ACF plot of IBM's returns
ggAcf(ibmrtn_ts)
#Test to see if IBM's returns have zero correlation
Box.test(ibmrtn_ts,lag=10,type='Ljung') # p-value=.1734 -> zero serial correlation
Box.test(ibmrtn_ts,lag=5,type='Ljung')# p-value=.6434: -> zero serial correlation
vwrtn_ts = ts(data[,3],start=c(1926,1), frequency = 12)
#Produce a time plot for Value Weighted Index's returns (vwrtn)
autoplot(vwrtn_ts)
adf.test(vwrtn_ts) #p-value< 0.01  -> stationary
#Check to see if the mean of vwrtn is different from zero
t.test(vwrtn_ts) #p-value ~ 0: mean of the index returns is different from zero
#Prooduce ACF plot of IBM's returns
ggAcf(vwrtn_ts)
#Test to see if IBM's returns have zero correlation
Box.test(vwrtn_ts,lag=10,type='Ljung')#p-value ~ 0 : no zero serial correlation
Box.test(vwrtn_ts,lag=5,type='Ljung')#p-value ~ 0 : no zero serial correlation
#Try AR models with vwrtn
#Now try for vwrtn: value weighted index from the center for Research in Security Prices (CRSP)
ggPacf(vwrtn_ts)
fit1_ar= Arima(vwrtn_ts, order= c(3,0,0)) #Choose AR(3)
summary(fit1_ar)#AICc=-2991.67
ggAcf(fit1_ar$residuals)#ACF are not close to zero for smaller number of lags
Box.test(fit1_ar$residuals, lag=12, fitdf=3, type="Ljung") #p-value = 0.05988
ggAcf(fit1_ar$residuals)#ACF are not close to zero for smaller number of lags
Box.test(fit1_ar$residuals, lag=12, fitdf=3, type="Ljung") #p-value = 0.05988
ggAcf(fit1_ar$residuals)#ACF are not close to zero for smaller number of lags
#Prooduce ACF plot of IBM's returns
ggAcf(vwrtn_ts)
-2 + 0 + .5 * 0
(-2 + 0 + .5 * 0) * (-2 + 0 + .5 * 0) - 2 * 2
(-2 + 0 + .5 * 0) * (-2 + 0 + .5 * 0) - (2 * 2)
(-2 + 0 + .5 * 0) * (-2 + 0 + .5 * 0) - (4 * 4)
(-2 * 0) * (-2 * 1) - (2 * 2)
(-2 * 1) * (-2 * 2) - (2 * 2)
(1 + 0.5) * 4
sig2 <- 4
beta <- 1/sig2
sig2*(1+beta)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
library(tidyverse)
library(ggmap)
library(viridis)
library(leaflet)
library(ZillowR)
library(rgdal)
library(lubridate)
library(scales)
rm(acs2017Variables)
censusVars <- c(
total_population = "B01003_001",
total_hous_units = "B25001_001",
total_occ_hous_units = "B25002_002",
total_vac_hous_units = "B25002_003",
total_own_occ_units = "B25003_002",
total_rent_occ_units = "B25003_003",
total_for_rent_units = "B25004_002",
total_rented_non_occ = "B25004_003",
total_for_sale_units = "B25004_004",
total_sold_non_occ_units = "B25004_005",
med_rent_over_income = "B25071_001",
owner_hous_val_25th_per = "B25076_001",
owner_hous_val_50th_per = "B25077_001",
owner_hous_val_75th_per = "B25078_001",
med_owner_cost_mortg = "B25088_002",
med_owner_cost_no_mortg = "B25088_003",
med_cost_over_income_mortg = "B25092_002",
med_cost_over_income_no_mortg = "B25092_003",
med_hous_cost = "B25105_001",
med_fam_income = "B19113_001",
med_rent_0_bed = "B25031_002",
med_rent_1_bed = "B25031_003",
med_rent_2_bed = "B25031_004",
med_rent_3_bed = "B25031_005",
med_rent_4_bed = "B25031_006",
med_rent_5_plus_bed = "B25031_007",
med_rent = "B25064_001"
)
stJoesTract <- get_acs(
geography = "tract",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesBlockGroup <- get_acs(
geography = "block group",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesTract <- sf::st_transform(stJoesTract, 4326)
setwd("~/GitHub/South_Bend_Clustering")
setwd("~/GitHub/South_Bend_Clustering")
library(tidycensus)
library(tidyverse)
library(ggmap)
library(viridis)
library(leaflet)
library(ZillowR)
library(rgdal)
library(lubridate)
library(scales)
#5-year American Community Survey 2015
#Info Here: https://walkerke.github.io/tidycensus/
acs2017Variables <- load_variables(2017, "acs5", cache = TRUE)
rm(acs2017Variables)
censusVars <- c(
total_population = "B01003_001",
total_hous_units = "B25001_001",
total_occ_hous_units = "B25002_002",
total_vac_hous_units = "B25002_003",
total_own_occ_units = "B25003_002",
total_rent_occ_units = "B25003_003",
total_for_rent_units = "B25004_002",
total_rented_non_occ = "B25004_003",
total_for_sale_units = "B25004_004",
total_sold_non_occ_units = "B25004_005",
med_rent_over_income = "B25071_001",
owner_hous_val_25th_per = "B25076_001",
owner_hous_val_50th_per = "B25077_001",
owner_hous_val_75th_per = "B25078_001",
med_owner_cost_mortg = "B25088_002",
med_owner_cost_no_mortg = "B25088_003",
med_cost_over_income_mortg = "B25092_002",
med_cost_over_income_no_mortg = "B25092_003",
med_hous_cost = "B25105_001",
med_fam_income = "B19113_001",
med_rent_0_bed = "B25031_002",
med_rent_1_bed = "B25031_003",
med_rent_2_bed = "B25031_004",
med_rent_3_bed = "B25031_005",
med_rent_4_bed = "B25031_006",
med_rent_5_plus_bed = "B25031_007",
med_rent = "B25064_001"
)
stJoesTract <- get_acs(
geography = "tract",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesBlockGroup <- get_acs(
geography = "block group",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesTract <- sf::st_transform(stJoesTract, 4326)
stJoesBlockGroup <- sf::st_transform(stJoesBlockGroup, 4326)
zillowNeighborhoods <- readOGR(dsn = "./Data Sources",
layer = "ZillowNeighborhoods-IN",
stringsAsFactors = F)
stJoesZillow <- zillowNeighborhoods[zillowNeighborhoods$County == "Saint Joseph", ]
save.image("EDA Data.RData")
load("EDA Data.RData")
leaflet() %>%
addTiles() %>%
addPolygons(data = stJoesTract,
color = "black",
opacity = .6,
weight = 2,
popup = ~NAME,
group = "Census Tract") %>%
addPolygons(data = stJoesBlockGroup,
color = "blue",
opacity = .6,
weight = 2,
popup = ~NAME,
group = "Census Block Group") %>%
addPolygons(data = stJoesZillow,
color = "red",
opacity = .6,
weight = 2,
popup = ~Name,
group = "Zillow Neighborhoods") %>%
addLayersControl(
baseGroups = c("Census Tract", "Census Block Group", "Zillow Neighborhoods"),
options = layersControlOptions(collapsed = FALSE)
)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/South_Bend_Clustering")
library(tidycensus)
library(tidyverse)
library(ggmap)
library(viridis)
library(leaflet)
library(ZillowR)
library(rgdal)
library(lubridate)
library(scales)
#5-year American Community Survey 2015
#Info Here: https://walkerke.github.io/tidycensus/
acs2017Variables <- load_variables(2017, "acs5", cache = TRUE)
rm(acs2017Variables)
censusVars <- c(
total_population = "B01003_001",
total_hous_units = "B25001_001",
total_occ_hous_units = "B25002_002",
total_vac_hous_units = "B25002_003",
total_own_occ_units = "B25003_002",
total_rent_occ_units = "B25003_003",
total_for_rent_units = "B25004_002",
total_rented_non_occ = "B25004_003",
total_for_sale_units = "B25004_004",
total_sold_non_occ_units = "B25004_005",
med_rent_over_income = "B25071_001",
owner_hous_val_25th_per = "B25076_001",
owner_hous_val_50th_per = "B25077_001",
owner_hous_val_75th_per = "B25078_001",
med_owner_cost_mortg = "B25088_002",
med_owner_cost_no_mortg = "B25088_003",
med_cost_over_income_mortg = "B25092_002",
med_cost_over_income_no_mortg = "B25092_003",
med_hous_cost = "B25105_001",
med_fam_income = "B19113_001",
med_rent_0_bed = "B25031_002",
med_rent_1_bed = "B25031_003",
med_rent_2_bed = "B25031_004",
med_rent_3_bed = "B25031_005",
med_rent_4_bed = "B25031_006",
med_rent_5_plus_bed = "B25031_007",
med_rent = "B25064_001"
)
stJoesTract <- get_acs(
geography = "tract",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesBlockGroup <- get_acs(
geography = "block group",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = TRUE
)
stJoesTract <- sf::st_transform(stJoesTract, 4326)
stJoesBlockGroup <- sf::st_transform(stJoesBlockGroup, 4326)
zillowNeighborhoods <- readOGR(dsn = "./Data Sources",
layer = "ZillowNeighborhoods-IN",
stringsAsFactors = F)
zillowNeighborhoods <- readOGR(dsn = "./Data Sources",
layer = "ZillowNeighborhoods-IN",
stringsAsFactors = F)
getwd()
path.expand(".")
zillowNeighborhoods <- readOGR(dsn = "~/Data Sources",
layer = "ZillowNeighborhoods-IN",
stringsAsFactors = F)
zillowNeighborhoods <- readOGR(dsn = "../Data Sources",
layer = "ZillowNeighborhoods-IN",
stringsAsFactors = F)
stJoesZillow <- zillowNeighborhoods[zillowNeighborhoods$County == "Saint Joseph", ]
save.image("./EDA/EDA Data.RData")
save.image("../EDA/EDA Data.RData")
load("../EDA/EDA Data.RData")
leaflet() %>%
addTiles() %>%
addPolygons(data = stJoesTract,
color = "black",
opacity = .6,
weight = 2,
popup = ~NAME,
group = "Census Tract") %>%
addPolygons(data = stJoesBlockGroup,
color = "blue",
opacity = .6,
weight = 2,
popup = ~NAME,
group = "Census Block Group") %>%
addPolygons(data = stJoesZillow,
color = "red",
opacity = .6,
weight = 2,
popup = ~Name,
group = "Zillow Neighborhoods") %>%
addLayersControl(
baseGroups = c("Census Tract", "Census Block Group", "Zillow Neighborhoods"),
options = layersControlOptions(collapsed = FALSE)
)
stJoesTractDist <- stJoesTract %>%
select(ends_with('E', ignore.case = F)) %>%
as.tibble() %>%
select(-c(NAME, geometry))
colnames(stJoesTractDist) <- str_sub(colnames(stJoesTractDist), end = -2)
summary(stJoesTractDist)
rm(stJoesTractDist)
populationPal <- colorNumeric("Blues", stJoesTract$total_populationE)
totalHousingPal <- colorNumeric("Blues", stJoesTract$total_hous_unitsE)
totalRentalUnitsPal <- colorNumeric("Blues", stJoesTract$total_rent_occ_unitsE)
incomePal <- colorNumeric("Blues", stJoesTract$med_fam_incomeE)
housingCostPal <- colorNumeric("Blues", stJoesTract$med_hous_costE)
rentIncomePal <- colorNumeric("Blues", stJoesTract$med_rent_over_incomeE)
mapPopup <- paste0("<b>",
stJoesTract$NAME,
"</b><br>Total Population: ",
stJoesTract$total_populationE,
"<br>Total Housing Units: ",
stJoesTract$total_hous_unitsE,
"<br> Median Family Income: $",
stJoesTract$med_fam_incomeE,
"<br>Total Rental Units: ",
stJoesTract$total_rent_occ_unitsE,
"<br>Median Monthly Housing Costs: $",
stJoesTract$med_hous_costE,
"<br>Median Percent of Income Spent on Rent: ",
stJoesTract$med_rent_over_incomeE, "%")
leaflet() %>%
addTiles() %>%
addPolygons(data = stJoesTract,
color = ~populationPal(total_populationE),
weight = 3,
popup = mapPopup,
group = "Total Population") %>%
addLegend(title = "Population",
position = "bottomleft",
pal = populationPal,
values = stJoesTract$total_populationE,
group = "Total Population") %>%
addPolygons(data = stJoesTract,
color = ~totalHousingPal(total_hous_unitsE),
weight = 3,
popup = mapPopup,
group = "Total Housing Units") %>%
addLegend(title = "Housing Units",
position = "bottomleft",
pal = totalHousingPal,
values = stJoesTract$total_hous_unitsE,
group = "Total Housing Units") %>%
addPolygons(data = stJoesTract,
color = ~incomePal(med_fam_incomeE),
#opacity = .6,
weight = 3,
popup = mapPopup,
group = "Median Family Income") %>%
addLegend(title = "Family Income",
position = "bottomleft",
pal = incomePal,
values = stJoesTract$med_fam_incomeE,
group = "Median Family Income") %>%
addPolygons(data = stJoesTract,
color = ~totalRentalUnitsPal(total_rent_occ_unitsE),
#opacity = .6,
weight = 3,
popup = mapPopup,
group = "Total Rental Units") %>%
addLegend(title = "Rental Units",
position = "bottomleft",
pal = totalRentalUnitsPal,
values = stJoesTract$total_rent_occ_unitsE,
group = "Total Rental Units") %>%
addPolygons(data = stJoesTract,
color = ~housingCostPal(med_hous_costE),
#opacity = .6,
weight = 3,
popup = mapPopup,
group = "Median Housing Costs") %>%
addLegend(title = "Housing Costs",
position = "bottomleft",
pal = housingCostPal,
values = stJoesTract$med_hous_costE,
group = "Median Housing Costs") %>%
addPolygons(data = stJoesTract,
color = ~rentIncomePal(med_rent_over_incomeE),
#opacity = .6,
weight = 3,
popup = mapPopup,
group = "Median Rent/Income") %>%
addLegend(title = "Rent/Income",
position = "bottomleft",
pal = rentIncomePal,
values = stJoesTract$med_rent_over_incomeE,
group = "Median Rent/Income") %>%
addLayersControl(
overlayGroups = c("Total Population", "Total Housing Units", "Median Family Income", "Total Rental Units",
"Median Housing Costs", "Median Rent/Income"),
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup(c("Total Housing Units", "Median Family Income", "Total Rental Units", "Median Housing Costs",
"Median Rent/Income"))
ggplot(
data = stJoesTract,
aes(x = med_rentE, y = owner_hous_val_50th_perE, color = total_populationE)
) + geom_point() + scale_y_continuous(labels = dollar_format()) +
scale_x_continuous(labels = dollar_format()) +
labs(x = "Median Rent",
y = "Median Home Value",
title = "Median Home Value vs Rent in South Bend",
color = "Population") +
scale_color_gradient2() +
theme_classic()
neighborhoodRent <- read.csv("../Data Sources/Neighborhood Rent Prices-Zillow.csv",
stringsAsFactors = F) %>%
filter(State == "IN") %>%
filter(CountyName == "Saint Joseph County")
longRentZillow <- neighborhoodRent %>%
gather(key = DateString,
value = "ZRI",
-c(RegionID, RegionName, City, State, Metro, CountyName, SizeRank))
rm(neighborhoodRent)
tidyRentZillow <- longRentZillow %>%
mutate(DateString = str_sub(DateString, start = 2)) %>%
mutate(Date = as.Date(paste0(DateString, ".1"), "%Y.%m.%d") + months(1) - days(1))
rm(longRentZillow)
homeSales <- read.csv("../Data Sources/Sale_Counts_Seas_Adj_City.csv",
stringsAsFactors = F) %>%
filter(StateName == "Indiana") %>%
filter(RegionName == "South Bend")
bottomTier <- read.csv("../Data Sources/City/City_Zhvi_BottomTier.csv",
stringsAsFactors = F) %>%
filter(State == "IN") %>%
filter(Metro == "South Bend-Mishawaka")
middleTier <- read.csv("../Data Sources/City/City_Zhvi_MiddleTier.csv",
stringsAsFactors = F) %>%
filter(State == "IN") %>%
filter(Metro == "South Bend-Mishawaka")
topTier <- read.csv("../Data Sources/City/City_Zhvi_TopTier.csv",
stringsAsFactors = F) %>%
filter(State == "IN") %>%
filter(Metro == "South Bend-Mishawaka")
