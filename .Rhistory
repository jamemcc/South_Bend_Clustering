write.csv(pulled_vars, "Pulled_Variables.csv", row.names = F)
stJoesTract <- get_acs(
geography = "tract",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = FALSE
)
stJoesBlockGroup <- get_acs(
geography = "block group",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = FALSE
)
View(stJoesBlockGroup)
View(stJoesBlockGroup)
#Split NAME into separate columns
stJoesBlockGroup$BlockGroup <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][1]})
stJoesBlockGroup$CensusTract <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][2]})
stJoesBlockGroup$County <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][3]})
stJoesBlockGroup$State <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][4]})
#Split NAME into separate columns
stJoesTract$CensusTract <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][1]})
stJoesTract$County <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][2]})
stJoesTract$State <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][3]})
save(stJoesTract, stJoesBlockGroup, file = "census_data.RData")
stJoesTractCSV <- stJoesTract %>%
select(CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
colnames(stJoesTractCSV)[4:74] <- names(censusVars)
stJoesTractCSV <- stJoesTract %>%
select(CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
4:74
length(4:74)
stJoesTractCSV <- stJoesTract %>%
select(CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
colnames(stJoesTractCSV) %in% names(censusVars)
library(stringr)
colnames(stJoesTractCSV) %in% names(censusVars)
str_sub(colnames(stJoesTractCSV), end = -2) %in% names(censusVars)
names(censusVars) %in% str_sub(colnames(stJoesTractCSV), end = -2)
names(censusVars)[42]
censusVars <- c(
total_population = "B01003_001",
total_hous_units = "B25001_001",
total_occ_hous_units = "B25002_002",
total_vac_hous_units = "B25002_003",
total_own_occ_units = "B25003_002",
total_rent_occ_units = "B25003_003",
total_for_rent_units = "B25004_002",
total_rented_non_occ = "B25004_003",
total_for_sale_units = "B25004_004",
total_sold_non_occ_units = "B25004_005",
med_rent_over_income = "B25071_001",
owner_hous_val_25th_per = "B25076_001",
owner_hous_val_50th_per = "B25077_001",
owner_hous_val_75th_per = "B25078_001",
med_owner_cost_mortg = "B25088_002",
med_owner_cost_no_mortg = "B25088_003",
med_cost_over_income_mortg = "B25092_002",
med_cost_over_income_no_mortg = "B25092_003",
med_hous_cost = "B25105_001",
med_fam_income = "B19113_001",
med_non_fam_income = "B19202_001",
med_rent_0_bed = "B25031_002",
med_rent_1_bed = "B25031_003",
med_rent_2_bed = "B25031_004",
med_rent_3_bed = "B25031_005",
med_rent_4_bed = "B25031_006",
med_rent_5_plus_bed = "B25031_007",
med_rent = "B25064_001",
tot_white = "B02001_002",
tot_black = "B02001_003",
tot_native = "B02001_004",
tot_asian = "B02001_005",
tot_pacific = "B02001_006",
tot_other = "B02001_007",
tot_two_plus = "B02001_008",
median_age = "B01002_001",
median_male_age = "B01002_002",
median_female_age = "B01002_003",
tot_households = "B11001_001",
family_households = "B11001_002",
family_married_households = "B11001_003",
family_other_households = "B11001_004",
non_family_households = "B11001_007",
non_family_households_alone = "B11001_008",
non_family_households_not_alone = "B11001_009",
two_person_family = "B11016_003",
three_person_family = "B11016_004",
four_person_family = "B11016_005",
five_person_family = "B11016_006",
six_person_family = "B11016_007",
seven_plus_person_family = "B11016_008",
one_person_nonfamily = "B11016_010",
two_person_nonfamily = "B11016_011",
three_person_nonfamily = "B11016_012",
four_person_nonfamily = "B11016_013",
five_person_nonfamily = "B11016_014",
six_person_nonfamily = "B11016_015",
seven_plus_person_nonfamily = "B11016_016",
labor_force = "B23025_002",
civilian_labor_force = "B23025_003",
civilian_labor_force_employ = "B23025_004",
civilian_labor_force_unemploy = "B23025_005",
military_labor_force = "B23025_006",
non_labor_force = "B23025_007",
agg_income_deficit = "B17011_001",
agg_income_deficit_married = "B17011_002",
agg_income_deficit_nonmarried = "B17011_003",
agg_income_deficit_no_wife = "B17011_004",
agg_income_deficit_no_husband = "B17011_005",
median_household_income = "B25119_001",
median_hh_income_own = "B25119_002",
median_hh_income_rent = "B25119_003"
)
acs2017Variables <- load_variables(2017, "acs5", cache = TRUE)
pulled_vars <- data.frame(censusVars, stringsAsFactors = F) %>%
inner_join(acs2017Variables, by = c("censusVars" = "name"))
pulled_vars$variable_name <- names(censusVars)
pulled_vars <- pulled_vars %>%
select(variable_name, everything())
write.csv(pulled_vars, "Pulled_Variables.csv", row.names = F)
stJoesTract <- get_acs(
geography = "tract",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = FALSE
)
stJoesBlockGroup <- get_acs(
geography = "block group",
variables = censusVars,
state = "IN",
county = "St. Joseph County",
output = "wide",
geometry = FALSE
)
#Split NAME into separate columns
stJoesBlockGroup$BlockGroup <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][1]})
stJoesBlockGroup$CensusTract <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][2]})
stJoesBlockGroup$County <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][3]})
stJoesBlockGroup$State <- apply(stJoesBlockGroup[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][4]})
#Split NAME into separate columns
stJoesTract$CensusTract <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][1]})
stJoesTract$County <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][2]})
stJoesTract$State <- apply(stJoesTract[, 'NAME'], 1, function(x){str_split(x, pattern = ", ")[[1]][3]})
save(stJoesTract, stJoesBlockGroup, file = "census_data.RData")
stJoesTractCSV <- stJoesTract %>%
select(CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
colnames(stJoesTractCSV)[4:74] <- names(censusVars)
stJoesTractCSV <- stJoesTract %>%
select(CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
colnames(stJoesTractCSV)[4:75] <- names(censusVars)
stJoesBlockGroupCSV <- stJoesBlockGroup %>%
select(BlockGroup, CensusTract, County, State, everything()) %>%
select(-ends_with('M', ignore.case = F), -GEOID, -NAME)
colnames(stJoesBlockGroupCSV)[5:76] <- names(censusVars)
write.csv(stJoesTract, "St_Joes_Tract_Data.csv", row.names = F)
write.csv(stJoesBlockGroup, "St_Joes_Block_Group_Data.csv", row.names = F)
setwd("~/GitHub/DS-Now-Final-Project")
#Load the data
load("census_data.RData")
#Get rid of margins of error for now
minus_margins_tr <- stJoesTract %>%
select(-ends_with('M', ignore.case = F))
#Get rid of margins of error for now
minus_margins_bg <- stJoesBlockGroup %>%
select(-ends_with('M', ignore.case = F))
#Find the number of missing values for each dataset
tract_nas <- sapply(minus_margins_tr, function(x){sum(is.na(x))})
bg_nas <- sapply(minus_margins_bg, function(x){sum(is.na(x))})
bg_nas[bg_nas > 0]
#Filter columns with an NA's
filtered_bg <- minus_margins_bg[, bg_nas == 0]
#Filter columns with an NA's
filtered_tr <- minus_margins_tr[, tract_nas == 0]
#Scale values for clustering
scaled_bg <- filtered_bg %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
scaled_tract <- filtered_tr %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
num_centers <- seq(from = 2, to = 15, by = 1)
tot_withinss <- rep(0, length(num_centers))
for (i in 1:length(num_centers)) {
kmeans_model <- kmeans(scaled_bg, num_centers[i])
tot_withinss[i] <- kmeans_model$tot.withinss
}
plot(num_centers, tot_withinss)
kmeans_six <- kmeans(scaled_bg, 6)
center_info <- data.frame(kmeans_six$centers)
kmeans_six$size
scaled_scale <- attr(scaled_bg$total_populationE, 'scaled:scale')
scaled_center <- attr(scaled_bg$total_populationE, 'scaled:center')
unscaled_centers <- center_info
for (i in 1:ncol(center_info)) {
name_of_column <- colnames(center_info)[i]
unscaled_centers[, name_of_column] <- center_info[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
load("census_shapefiles.RData")
block_group_map_data <- blockGroupShapes %>%
left_join(filtered_bg, by = "NAME") %>%
mutate(Profile = kmeans_six$cluster)
clusterPal <- colorFactor(c("red", "orange", "yellow", "green", "blue", "purple"), block_group_map_data$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data,
color = ~clusterPal(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal,
values = block_group_map_data$Profile)
bg_nas[bg_nas > 0]
tot_withinss_bg <- rep(0, length(num_centers))
num_centers <- seq(from = 2, to = 15, by = 1)
tot_withinss_bg <- rep(0, length(num_centers))
tot_withinss_tr <- rep(0, length(num_centers))
for (i in 1:length(num_centers)) {
kmeans_model_bg <- kmeans(scaled_bg, num_centers[i])
tot_withinss_bg[i] <- kmeans_model_bg$tot.withinss
kmeans_model_tr <- kmeans(scaled_tract, num_centers[i])
tot_withinss_tr[i] <- kmeans_model_tr$tot.withinss
}
plot(num_centers, tot_withinss_tr)
plot(num_centers, tot_withinss_bg)
plot(num_centers, tot_withinss_tr)
plot(num_centers, tot_withinss_bg)
kmeans_five_bg <- kmeans(scaled_bg, 5)
center_info_bg <- data.frame(kmeans_five_bg$centers)
kmeans_five_bg$size
kmeans_five_tr <- kmeans(scaled_tr, 5)
kmeans_five_tr <- kmeans(scaled_tract, 5)
center_info_tr <- data.frame(kmeans_five_tr$centers)
kmeans_five_bg$size
scaled_tract <- filtered_tr %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
kmeans_five_tr <- kmeans(scaled_tract, 5)
center_info_tr <- data.frame(kmeans_five_tr$centers)
center_info_tr <- data.frame(kmeans_five_tr$centers)
kmeans_five_tr$size
plot(num_centers, tot_withinss_tr)
kmeans_five_tr$size
scaled_scale <- attr(scaled_bg$total_populationE, 'scaled:scale')
scaled_center <- attr(scaled_bg$total_populationE, 'scaled:center')
unscaled_centers <- center_info
for (i in 1:ncol(center_info)) {
name_of_column <- colnames(center_info)[i]
unscaled_centers[, name_of_column] <- center_info[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
unscaled_centers_tr <- center_info_tr
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
scaled_scale_tr <- attr(scaled_tract$total_populationE, 'scaled:scale')
scaled_center_tr <- attr(scaled_tract$total_populationE, 'scaled:center')
unscaled_centers_tr <- center_info_tr
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
scaled_scale_bg <- attr(scaled_bg$total_populationE, 'scaled:scale')
scaled_center_bg <- attr(scaled_bg$total_populationE, 'scaled:center')
unscaled_centers_bg <- center_info_bg
for (i in 1:ncol(center_info_bg)) {
name_of_column <- colnames(center_info_bg)[i]
unscaled_centers_bg[, name_of_column] <- center_info_bg[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
load("census_shapefiles.RData")
block_group_map_data <- blockGroupShapes %>%
left_join(filtered_bg, by = "NAME") %>%
mutate(Profile = kmeans_five_bg$cluster)
block_group_map_data_bg <- blockGroupShapes %>%
left_join(filtered_bg, by = "NAME") %>%
mutate(Profile = kmeans_five_bg$cluster)
clusterPal <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_bg$Profile)
clusterPal_bg <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_bg$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_bg,
color = ~clusterPal_bg(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_bg,
values = block_group_map_data$Profile)
block_group_map_data_tr <- blockGroupShapes %>%
left_join(filtered_tr, by = "NAME") %>%
mutate(Profile = kmeans_five_tr$cluster)
block_group_map_data_tr <- tractShapes %>%
left_join(filtered_tr, by = "NAME") %>%
mutate(Profile = kmeans_five_tr$cluster)
clusterPal_tr <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_tr$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_tr,
color = ~clusterPal_tr(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_tr,
values = block_group_map_data$Profile)
View(unscaled_centers_tr)
View(unscaled_centers_tr)
library(tidycensus)
library(tidycensus)
library(dplyr)
library(stringr)
library(leaflet)
setwd("~/GitHub/DS-Now-Final-Project")
#Load the data
load("census_data.RData")
#Get rid of margins of error for now
minus_margins_tr <- stJoesTract %>%
select(-ends_with('M', ignore.case = F))
#Get rid of margins of error for now
minus_margins_bg <- stJoesBlockGroup %>%
select(-ends_with('M', ignore.case = F))
#Find the number of missing values for each dataset
tract_nas <- sapply(minus_margins_tr, function(x){sum(is.na(x))})
bg_nas <- sapply(minus_margins_bg, function(x){sum(is.na(x))})
bg_nas[bg_nas > 0]
#Filter columns with an NA's
filtered_bg <- minus_margins_bg[, bg_nas == 0]
#Filter columns with an NA's
filtered_tr <- minus_margins_tr[, tract_nas == 0]
#Scale values for clustering
scaled_bg <- filtered_bg %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
scaled_tract <- filtered_tr %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
num_centers <- seq(from = 2, to = 15, by = 1)
tot_withinss_bg <- rep(0, length(num_centers))
tot_withinss_tr <- rep(0, length(num_centers))
for (i in 1:length(num_centers)) {
kmeans_model_bg <- kmeans(scaled_bg, num_centers[i])
tot_withinss_bg[i] <- kmeans_model_bg$tot.withinss
kmeans_model_tr <- kmeans(scaled_tract, num_centers[i])
tot_withinss_tr[i] <- kmeans_model_tr$tot.withinss
}
plot(num_centers, tot_withinss_tr)
plot(num_centers, tot_withinss_bg)
kmeans_five_bg <- kmeans(scaled_bg, 5)
center_info_bg <- data.frame(kmeans_five_bg$centers)
kmeans_five_bg$size
kmeans_five_tr <- kmeans(scaled_tract, 5)
center_info_tr <- data.frame(kmeans_five_tr$centers)
kmeans_five_tr$size
scaled_scale_tr <- attr(scaled_tract$total_populationE, 'scaled:scale')
scaled_center_tr <- attr(scaled_tract$total_populationE, 'scaled:center')
unscaled_centers_tr <- center_info_tr
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
scaled_scale_bg <- attr(scaled_bg$total_populationE, 'scaled:scale')
scaled_center_bg <- attr(scaled_bg$total_populationE, 'scaled:center')
unscaled_centers_bg <- center_info_bg
for (i in 1:ncol(center_info_bg)) {
name_of_column <- colnames(center_info_bg)[i]
unscaled_centers_bg[, name_of_column] <- center_info_bg[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
load("census_shapefiles.RData")
block_group_map_data_bg <- blockGroupShapes %>%
left_join(filtered_bg, by = "NAME") %>%
mutate(Profile = kmeans_five_bg$cluster)
clusterPal_bg <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_bg$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_bg,
color = ~clusterPal_bg(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_bg,
values = block_group_map_data$Profile)
block_group_map_data_tr <- tractShapes %>%
left_join(filtered_tr, by = "NAME") %>%
mutate(Profile = kmeans_five_tr$cluster)
clusterPal_tr <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_tr$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_tr,
color = ~clusterPal_tr(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_tr,
values = block_group_map_data$Profile)
######Decent amount of missing values for block groups. Will try to fill in with median from census tract######
#First, find which columns are numeric
numeric_columns <- unlist(lapply(minus_margins_tr, is.numeric))
#Get the columns that will be filled in
numeric_col_names <- colnames(minus_margins_tr)[numeric_columns]
#Progromatically go through and fill-in missing block group data with census tract data
for (i in 1:length(numeric_col_names)) {
filledInData <- DataCombine::FillIn(minus_margins_bg,
minus_margins_tr[, c("CensusTract", numeric_col_names[i])],
numeric_col_names[i],
numeric_col_names[i],
KeyVar = c("CensusTract"),
allow.cartesian = FALSE,
KeepD2Vars = FALSE)
}
library(tidycensus)
library(dplyr)
library(stringr)
library(leaflet)
setwd("~/GitHub/DS-Now-Final-Project")
#Load the data
load("census_data.RData")
#Get rid of margins of error for now
minus_margins_tr <- stJoesTract %>%
select(-ends_with('M', ignore.case = F))
#Get rid of margins of error for now
minus_margins_bg <- stJoesBlockGroup %>%
select(-ends_with('M', ignore.case = F))
#Find the number of missing values for each dataset
tract_nas <- sapply(minus_margins_tr, function(x){sum(is.na(x))})
bg_nas <- sapply(minus_margins_bg, function(x){sum(is.na(x))})
bg_nas[bg_nas > 0]
#Filter columns with an NA's
filtered_bg <- minus_margins_bg[, bg_nas == 0]
#Filter columns with an NA's
filtered_tr <- minus_margins_tr[, tract_nas == 0]
#Scale values for clustering
scaled_bg <- filtered_bg %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
scaled_tract <- filtered_tr %>%
select_if(is.numeric) %>%
scale() %>%
as_tibble()
num_centers <- seq(from = 2, to = 15, by = 1)
tot_withinss_bg <- rep(0, length(num_centers))
tot_withinss_tr <- rep(0, length(num_centers))
for (i in 1:length(num_centers)) {
kmeans_model_bg <- kmeans(scaled_bg, num_centers[i])
tot_withinss_bg[i] <- kmeans_model_bg$tot.withinss
kmeans_model_tr <- kmeans(scaled_tract, num_centers[i])
tot_withinss_tr[i] <- kmeans_model_tr$tot.withinss
}
plot(num_centers, tot_withinss_tr)
plot(num_centers, tot_withinss_bg)
kmeans_five_bg <- kmeans(scaled_bg, 5)
center_info_bg <- data.frame(kmeans_five_bg$centers)
kmeans_five_bg$size
kmeans_five_tr <- kmeans(scaled_tract, 5)
center_info_tr <- data.frame(kmeans_five_tr$centers)
kmeans_five_tr$size
scaled_scale_tr <- attr(scaled_tract$total_populationE, 'scaled:scale')
scaled_center_tr <- attr(scaled_tract$total_populationE, 'scaled:center')
unscaled_centers_tr <- center_info_tr
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale[name_of_column] + scaled_center[name_of_column]
}
for (i in 1:ncol(center_info_tr)) {
name_of_column <- colnames(center_info_tr)[i]
unscaled_centers_tr[, name_of_column] <- center_info_tr[, name_of_column] * scaled_scale_tr[name_of_column] + scaled_center_tr[name_of_column]
}
scaled_scale_bg <- attr(scaled_bg$total_populationE, 'scaled:scale')
scaled_center_bg <- attr(scaled_bg$total_populationE, 'scaled:center')
unscaled_centers_bg <- center_info_bg
for (i in 1:ncol(center_info_bg)) {
name_of_column <- colnames(center_info_bg)[i]
unscaled_centers_bg[, name_of_column] <- center_info_bg[, name_of_column] * scaled_scale_bg[name_of_column] + scaled_center_bg[name_of_column]
}
load("census_shapefiles.RData")
block_group_map_data_bg <- blockGroupShapes %>%
left_join(filtered_bg, by = "NAME") %>%
mutate(Profile = kmeans_five_bg$cluster)
clusterPal_bg <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_bg$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_bg,
color = ~clusterPal_bg(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_bg,
values = block_group_map_data$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_bg,
color = ~clusterPal_bg(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_bg,
values = block_group_map_data_bg$Profile)
block_group_map_data_tr <- tractShapes %>%
left_join(filtered_tr, by = "NAME") %>%
mutate(Profile = kmeans_five_tr$cluster)
clusterPal_tr <- colorFactor(c("red", "orange", "yellow", "green", "blue"), block_group_map_data_tr$Profile)
leaflet() %>%
addTiles() %>%
addPolygons(data = block_group_map_data_tr,
color = ~clusterPal_tr(Profile),
opacity = 1) %>%
addLegend(pal = clusterPal_tr,
values = block_group_map_data_tr$Profile)
